package exterrors

import (
	"fmt"

	"github.com/emersion/go-smtp"
)

type EnhancedCode smtp.EnhancedCode

func (ec EnhancedCode) FormatLog() string {
	return fmt.Sprintf("%d.%d.%d", ec[0], ec[1], ec[2])
}

// SMTPError type is a copy of emersion/go-smtp.SMTPError type
// that extends it with Fields method for logging and reporting
// in maddy. It should be used instead of library type for all
// errors.
type SMTPError struct {
	Code         int
	EnhancedCode EnhancedCode
	Message      string

	// If the error was generated by a message check
	// this field includes module name.
	CheckName string

	// If the error was generated by a delivery target
	// this field includes module name.
	TargetName string

	// If the error was generated as a result of another
	// error - this field contains the original error object.
	Err error

	Misc map[string]interface{}
}

func (se *SMTPError) Unwrap() error {
	return se.Err
}

func (se *SMTPError) Fields() map[string]interface{} {
	ctx := make(map[string]interface{}, len(se.Misc)+3)
	for k, v := range se.Misc {
		ctx[k] = v
	}
	ctx["smtp_code"] = se.Code
	ctx["smtp_enchcode"] = se.EnhancedCode
	ctx["smtp_msg"] = se.Message
	if se.CheckName != "" {
		ctx["check"] = se.CheckName
	}
	if se.TargetName != "" {
		ctx["target"] = se.TargetName
	}
	return ctx
}

func (se *SMTPError) Temporary() bool {
	return se.Code/100 == 4
}

func (se *SMTPError) Error() string {
	return se.Message
}

// SMTPCode is a convenience function that returns one of its arguments
// depending on the result of exterrors.IsTemporary for the specified error
// object.
func SMTPCode(err error, temporaryCode, permanentCode int) int {
	if IsTemporary(err) {
		return temporaryCode
	}
	return permanentCode
}

// SMTPEnchCode is a convenience function changes the first number of the SMTP enhanced
// status code based on the value exterrors.IsTemporary returns for the specified
// error object.
func SMTPEnchCode(err error, code EnhancedCode) EnhancedCode {
	if IsTemporary(err) {
		code[0] = 4
	}
	code[0] = 5
	return code
}
