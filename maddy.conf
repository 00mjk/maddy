# Location of TLS certificate and private key. Global directive is used for all
# endpoints.
tls cert_file_path pkey_file

# hostname is the identifier of this mail server.
# It is recommended to set it to the domain that resolves to the IP of this
# server.
hostname mx1.example.org

# Primary domain is used as a sender of autogenerated messages.
$(primary_domain) = example.org

# All domains we want to receive messages for.
# Just remove 'example.com' here if you handle only $(primary_domain).
$(local_domains) = $(primary_domain) example.com

# -------------
# Below are all remaining details you probably don't have to care
# about if you just want a working mail server.
# -------------

# Domain that will be used in From field in auto-generated messages.
# (notably, notifications about failed deliveries)
autogenerated_msg_domain $(primary_domain)

# auth_domains directive allows users to log in using 'user@domain' as a
# username in addition to just 'user'.
auth_domains $(local_domains)

# Create and initialize sql module, it provides simple authentication and
# storage backend using one database for everything.
sql local_mailboxes local_authdb {
    driver sqlite3
    dsn all.db

    # By default sql module stores mesage content in table rows, this option
    # changes that behavior to store message in a FS diretory. For SQlite3,
    # this eliminates a signficiant amount of synchronization issues.
    fsstore
}

smtp smtp://0.0.0.0:25 {
    check {
        # Verify that hostname in EHLO/HELO resolves to the source IP. Fail if it is not.
        require_matching_ehlo

        # Verify that domain in MAIL FROM does have a MX record.
        require_mx_record

        # Verify DKIM signatures in incoming messages.
        verify_dkim
    }

    modify {
    	# Implement plus-address notation.
    	replace_rcpt /(.+)\+(.+)@(.+)/ $1@$3
    }

    # All messages for the recipients at $(local_domains) should be
    # delivered to local mailboxes.
    destination $(local_domains) {
        deliver_to local_mailboxes
    }

    # Other recipients are rejected because we are not an open relay.
    default_destination {
        reject 550 5.1.1 "User not local"
    }
}

submission smtps://0.0.0.0:465 smtp://0.0.0.0:587 {
    # Use sql module for authentication.
    auth local_authdb

    # All messages for the recipients at $(local_domains) should be
    # delivered to local mailboxes directly.
    destination $(local_domains) {
        deliver_to local_mailboxes
    }

    # Remaining recipients are scheduled for remote delivery.
    default_destination {
        deliver_to remote_queue
    }
}

queue remote_queue {
    # Try to deliver message up to 8 tries. Note that this counter is not per
    # recipient, but for entire message.
    max_tries 8

    # Try to deliver up to 16 messages concurrently.
    max_parallelism 16

    # Send messages to remote MTA discovered using DNS MX records.
    target remote

    # This is how bounce messages (aka DSNs) will be routed.
    # The syntax is same as smtp/submission directives.
    bounce {
        destination $(local_domains) {
            deliver_to local_mailboxes
        }
        default_destination {
            reject 550 5.0.0 "Refusing to send DSNs to non-local addresses"
        }
    }
}

# Configuration for remote delivery module (none for now, just create a
# configuration block for use with 'target' above).
remote { }

imap imaps://0.0.0.0:993 imap://0.0.0.0:143 {
    auth local_authdb
    storage local_mailboxes
}
