maddy-targets(5) "maddy mail server - message delivery targets"

# INTRODUCTION

This man page describes modules that can used with deliver_to directive
of smtp endpoint.

# SEE ALSO

*maddy.conf*(5) for main man page.

*maddy-storage*(5) for storage backends reference.

# SQL MODULE

sql module described in maddy-storage(5) can also be used as a delivery target.
See mentioned man page for details.

# QUEUE MODULE

Queue module buffers messages on disk and retries delivery multiple times to
another target to ensure reliable delivery.

```
queue {
    max_parallelism 16
    max_tries 8
    target dummy
}
```

## Inline arguments

When used inline, first argument specifies directory to use for storage.
Relative paths are relative to the StateDirectory.


Valid configuration directives:

## target <config block>

Delivery target to use for delivery. You probably want to use 'remote' here.

## location <directory>

File system directory to use to store queued messages.

Default is StateDirectory/<configuration_block_name>.

## max_parallelism <count>

Start up to 'count' goroutines for message processing. Basically, this option
limits amount of messages tried to be delivered concurrently.

Default is 16.

## max_tries <count>

Attempt delivery up to 'count' times. Note that no more attempts will be done
is permanent error occured during previous attempt.

Default is 4.

## bounce { ... }

The block specified with the bounce directive specifies how DSN (Delivery Status Notification)
messages should be routed. The syntax of directives inside this block is described in
PIPELINE DIRECTIVES section.

If this is block is not present in configuration, DSNs will not be generated. Note, however,
this is not what you want most of the time.

## autogenerated_msg_domain <domain>

Overrides the global autogenerated_msg_domain. Note that it must be non-empty (or specified
globally), if bounce directive is used too.

## debug [yes/no]

Enable verbose logging only for this configuration block.

# REMOTE MODULE

Module that implements message delivery to remote MTAs.
You probably want to use it with queue module for reliability.

```
remote
```

If a message check marks message as 'quarantined', remote module
will refuse to deliver message.

Valid configuration directives:

## hostname <hostname>

Override global hostname directive.

## authenticate_mx <methods...>

Specify list of methods to use when verifying authenticity of MX records.

Valid values are:
- off
  Disable authentication. THIS MAKES TLS FOR OUTBOUND DELIVERY INSECURE, DON'T USE 
  THIS UNLESS YOU KNOW WHAT YOU ARE DOING.
- mtasts
  Use MTA-STS policies for authentication. Note that MX records that are not allowed
  by an enforced MTA-STS policy will be always skipped.
- dnssec
  Use Authenticated Data (AD) DNS flag for authentication. This relies on system 
  resolver being able to verify DNSSEC signatures. maddy does not do it itself.
  Due to implementation details, dnssec is not supported on non-Unix platforms.
- common_domain
  Compare eTLD+1 of recipient domain and MX record. This is weak method and
  should be only used if interoperability with recipients without DNSSEC
  and MTA-STS is required with require_tls in effect.
  
Default setting is 'mtasts dnssec'.

Unless require_tls is also specified, inability to authenticate MX records will 
not cause delivery failure.

## require_tls

Always refuse to send messages over unencrypted connections.

This option changes behavior of MX record authentication. With require_tls,
delivery will fail if there MX records for recipient domain can't be 
authenticated.

## debug [yes/no]

Enable verbose logging only for this configuration block.

## mtasts_cache <directory>

Set location of the MTA-STS policies cache directory.
Default is StateDirectory/mtasts-cache

# SMTP_UPSTREAM MODULE

Module that implements transparent forwarding of messages over SMTP.

Use in pipeline configuration:
```
deliver_to smtp_upstream smtp://127.0.0.1:5353 {
  # Other settings, see below.
}
```

Use as a standalone definition:
```
smtp_upstream amavisd {
    targets smtp://127.0.0.1:5353
}

somewhere_else {
    deliver_to amavisd
}
```

Endpoint formats use format described in ADDRESS DEFINITIONS.

Valid configuration directives:

## debug [yes/no]

Override global debug directive.

## tls_client { ... }

Override global tls_client directive.

## attempt_starttls [yes/no]

Attempt to use STARTTLS if it is supported by the remote server.
If TLS handshake fails, connection will be retried without STARTTLS use
unless require_tls is specified. Default is 'yes'.

## require_tls [yes/no]

Refuse to pass messages over plain-text connections. Default is 'no'.

## auth off|plain|forward|external [...]

Specify the way to authenticate to the remote server.
Valid values:

- off
No authentication.

- plain
Authenticate using specified username-password pair.
Username and password should be specified after 'plain':
```
auth plain username_here password_here
```
**Don't use** this without enforced TLS ('require_tls yes').

- forward
Forward credentials specified by the client.
**Don't use** this without enforced TLS ('require_tls yes').

- external
Request "external" SASL authentication. This is usually used for
authentication using TLS client certificates. See TLS CLIENT CONFIGURATION
for how to specify client certificate.

## target <endpoint0> [endpoint1...]

Specify remote server addresses to use. See ADDRESS DEFINITIONS for syntax to use.
Basically, it is 'smtp://ADDRESS:PORT' for plain SMTP and 'smtps://ADDRESS:PORT' for
SMTPS (aka SMTP with Implicit TLS)..

Multiple addresses can be specified, they will be tried in order until connection to
one succeeds (including TLS handshake if TLS is required).
