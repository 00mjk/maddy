maddy(1) "maddy mail server" "maddy reference documentation"

; TITLE Introduction
; NO_TOC

# Name

maddy - Simple, fast, secure all-in-one mail server.

# Synopsis

*maddy* [options...]

# Description

Maddy is Mail Transfer agent (MTA), Mail Delivery Agent (MDA), Mail Submission
Agent (MSA), IMAP server and a set of other essential protocols/schemes
necessary to run secure email server implemented in one executable.

*Disclaimer: maddy is in early development, backward-incompatible changes
happen from time to time and bugs are waiting to eat your messages. Caveat
emptor.*

# Command line arguments

*-h, -help*
	Show help message and exit.

*-config* _path_
	Path to configuration file. Default is /etc/maddy/maddy.conf.

*-state* _path_
	Path to the state directory. This directory will be used to store all
	persistent data and should be writable. Default is /var/lib/maddy.

*-libexec* _path_
	Path to the libexec directory. Helper executables will be searched here.
	Default is /usr/lib/maddy.

*-runtime* _path_
	Path to the runtime directory. Temporary data will be stored here.  It is
	not recommended to use tmpfs for it since runtime directory is used only
	for large objects that can't be stored in RAM directly.

*-log* _targets..._
	Logging targets. Format is the same as 'log' config directive.

*-debug*
	Enable debug log. You want to use it when reporting bugs.

*-debug.pprof, -debug.blockprofrate, -debug.mutexproffract*
	These options are meant for use by developers and are not interesting for
	end users.

# Modules

maddy is built of many small components called "modules". Each module does one
certain well-defined task. Modules can be connected to each other in arbitrary
ways to achieve wanted functionality. Default configuration file defines
set of modules that together implement typical email server stack.

A single module can be used multiple times with different configuration,
each configuration block gets its unique name. When referencing modules
from configuration of other modules, configuration block name is typically
used instead of module name itself. Here is the example:
```
module1 config1 {
    blah_blah
}

module2 config2 {
    # This directive means that the module2 with configuration
    # block config2 will module1 for some of its functionality. For
    # example, it may send messages to it for some handling (filtering
    # or delivery, you got the idea). module1 will handle them in accordance
    # with the config1 block.
    target config1
}
```

Generic syntax for module configuration block is as follows:

```
module_name config_block_name optional_aliases... {
    configuration
    directives
    for_this
    module
}
```
If more than one config_block_name is specified, they all will be usable.
Basically, they will be aliased to the first name.

If config_block_name is omitted, it will be the same as module_name.
Configuration block name must be unique.

Modules implementing service endpoints don't use arguments syntax explained
above. Instead they use arguments to specify list of addresses to listen on.
There is no 'configuration block name' in this case.

# Reference documentation conventions

## Syntax descriptions for directives

Underlined values are placeholders and should be replaced by your values.
_boolean_ is either 'yes' or 'no' string.

Ellipsis (_smth..._) means that multiple values can be specified

# Global directives

These directives applied for all configuration blocks that don't override it.

*Syntax*: hostname _domain_ ++
*Default*: not specified

Internet hostname of this mail server. Typicall FQDN is used. It is recommended
to make sure domain specified here resolved to the public IP of the server.

*Syntax*: autogenerated_msg_domain _domain_ ++
*Default*: not specified

Domain that is used in From field for auto-generated messages (such as Delivery
Status Notifications).

*Syntax*: ++
    tls _cert_file_ _pkey_file_ ++
    tls self_signed ++
    tls off ++
*Default*: not specified

Default TLS certificate to use for all endpoints.

Must be present in either all endpoint modules configuration blocks or as
global directive.

Use of 'self_signed' generates temporary self-signed certificate, this useful
for testing but should be used only for it.

You can also specify other configuration options such as cipher suites and TLS
version. See TLS server configuration for details. maddy uses reasonable
cipher suites and TLS versions by default so you generally don't have to worry
about it.

*Syntax*: tls_client { ... } ++
*Default*: not specified

This is optional block that specifies various TLS-related options to use when
making outbound connections. See TLS client configuration for details on
directives that can be used in it. maddy uses reasonable cipher suites and TLS
versions by default so you generally don't have to worry about it.

*Syntax*: ++
    log _targets..._ ++
    log off ++
*Default*: stderr

Write log to one of more "targets".

The target can be one or the following:

- stderr
  
  Write logs to stderr.

- stderr_ts
  
  Write logs to stderr with timestamps.

- syslog
  
  Send logs to the local syslog daemon.

- _file path_
  
  Write (append) logs to file.

Example:
```
log syslog /var/log/maddy.log
```

*Note:* Maddy does not perform log files rotation, this is the job of the
logrotate daemon. Send SIGUSR1 to maddy process to make it reopen log files.

*Syntax*: debug _boolean_ ++
*Default*: no

Enable verbose logging for all modules. You don't need that unless you are
reporting a bug.

*Syntax*: storage_perdomain _boolean_ ++
*Default*: no

Don't remove domain part of username when accessing the underlying storage and
require it to be present. Can be used if you want user@domain1 and user@domain2
to be different accounts at the storage level.

Typically used with 'auth_domain'.

*Syntax*: auth_perdomain _boolean_ ++
*Default*: no

Don't remove domain part of username when authenticating and require it to be
present. Can be used if you want user@domain1 and user@domain2 to be different
accounts.

*Syntax* auth_domains _domains..._ ++
*Default*: not specified

Domains that should be allowed in username during authentication.

For example, if 'auth_domains' is set to "domain1 domain2", then
username, username@domain1 and username@domain2 will be accepted as valid login
name in addition to just username.

If used without 'auth_perdomain', domain part will be removed from login before
check with underlying auth. mechanism. If 'auth_perdomain' is set, then
auth_domains must be also set and domain part WILL NOT be removed before check.

# Authors

Maintained by Max Mazurov <fox.cpp@disroot.org>. Project includes contributions
made by other people.

Source code is available at https://github.com/foxcpp/maddy.

# See also

*maddy-config*(5) - Detailed configuration syntax description ++
*maddy-imap*(5) - IMAP endpoint module reference ++
*maddy-smtp*(5) - SMTP & Submission endpoint module reference ++
*maddy-targets*(5) - Delivery targets reference ++
*maddy-storage*(5) - Storage modules reference ++
*maddy-auth*(5) - Authentication modules reference ++
*maddy-filters*(5) - Message filtering modules reference ++
*maddy-tls*(5) - Advanced TLS client & server configuration
